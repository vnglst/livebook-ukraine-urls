# Netherlands still up

## About

Using Elixir Livebook to monitor if Ukranian government websites are still up and running.

## Getting the urls

```elixir
Mix.install([
  {:httpoison, "~> 1.8"}
])
```

```elixir
{:ok, body} = File.read("./netherlands.txt")

urls =
  body
  |> String.split("\n", trim: true)
  |> Enum.map(&URI.parse/1)
  |> Enum.map(fn %URI{scheme: scheme, host: host} -> "#{scheme}://#{host}" end)
  |> Enum.filter(fn url -> String.slice(url, -3..-1) == ".nl" end)
  |> Enum.uniq()
```

```elixir
File.write("netherlands-parsed.txt", urls |> Enum.join("\n"))
```

## Concurrently get online status of all urls

```elixir
defmodule Res do
  def handle({:ok, {:ok, %HTTPoison.Response{status_code: status_code}}}) do
    status_code
  end

  def handle({:ok, {:error, %HTTPoison.Error{reason: reason}}}) do
    reason
  end

  def handle({_s, :timeout}) do
    :timeout
  end

  def handle({_s, unknown}) do
    unknown
  end
end

result =
  urls
  |> Task.async_stream(&HTTPoison.get/1,
    ordered: true,
    max_concurrency: 500,
    # in milliseconds
    timeout: 1_000_000,
    on_timeout: :kill_task
  )
  |> Enum.into([])
  |> Enum.map(&Res.handle/1)
```

## Format message

```elixir
total = urls |> Enum.count()

online = result |> Enum.count(fn el -> el == 200 end)

{:ok, datetime} = DateTime.now("Etc/UTC")
now = datetime |> DateTime.to_iso8601()

message = "[#{now}] of total #{total} urls there are still #{online} online"
```

## Write message to file

```elixir
File.write("online-report.txt", message <> "\n", [:append])
```
