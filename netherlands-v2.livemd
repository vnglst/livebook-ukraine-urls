# Netherlands still up - version 2

## About

Using Elixir Livebook to monitor if Dutch government websites are still up and running.

## Getting the urls

```elixir
Mix.install([
  {:httpoison, "~> 1.8"}
])
```

```elixir
{:ok, body} = File.read("./netherlands.txt")

urls =
  body
  |> String.split("\n", trim: true)
  |> Enum.map(&URI.parse/1)
  |> Enum.map(fn %URI{scheme: scheme, host: host} -> "#{scheme}://#{host}" end)
  |> Enum.filter(fn url -> String.slice(url, -3..-1) == ".nl" end)
  |> Enum.uniq()

# |> Enum.take(10)
```

```elixir
File.write("netherlands-parsed.txt", urls |> Enum.join("\n"))
```

## Concurrently get online status of all urls

```elixir
{:ok, supervisor} = Task.Supervisor.start_link()

result =
  Task.Supervisor.async_stream_nolink(
    supervisor,
    urls,
    fn url -> HTTPoison.get(url, [], follow_redirect: true) end,
    ordered: true,
    max_concurrency: 1000,
    timeout: 1_000_000,
    # in milliseconds
    on_timeout: :kill_task
  )
  |> Enum.into([])
```

## Format responses

```elixir
defmodule Response do
  def handle(
        {:ok, {:ok, %HTTPoison.Response{status_code: status_code, request_url: request_url}}}
      ) do
    [request_url, status_code]
  end

  def handle({:ok, {:error, error}}) do
    [:error, error]
  end

  def handle({:exit, msg}) do
    [:exit, msg]
  end
end

formatted = result |> Enum.map(&Response.handle/1)
```

## Format message

```elixir
total = urls |> Enum.count()
online = formatted |> Enum.count(fn [_, status] -> status === 200 end)

{:ok, datetime} = DateTime.now("Etc/UTC")
now = datetime |> DateTime.to_iso8601()

message = "[#{now}] of total #{total} urls there are still #{online} online"
```

## Write message to file

```elixir
File.write("online-report.txt", message <> "\n", [:append])
```
